import { createSlice } from '@reduxjs/toolkit'
import { message } from 'antd'

const initialState = {
  isAuthenticated: false, //authendicated: check if user is logged in or not ?

  isLoading: true,
  user: {
    email: '',
    phone: '',
    fullName: '',
    role: '',
    avatar: '',
    id: '',
  },
}

export const accountSlice = createSlice({
  name: 'account',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    doLoginAction: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.isAuthenticated = true
      state.user = action.payload
      state.isLoading = false
    },

    doLogoutAction: (state, action) => {
      localStorage.removeItem('access_token')
      state.isAuthenticated = false
      state.user = {
        email: '',
        phone: '',
        fullName: '',
        role: '',
        avatar: '',
        id: '',
      }
    },

    doFetchAccount: (state, action) => {
      state.isAuthenticated = true
      state.user = action.payload
      state.isLoading = false
    },

    doUpdateAccount: (state, action) => {
      state.user = action.payload
      message.success('Update user successfully!')
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
})

export const {
  doLoginAction,
  doLogoutAction,
  doFetchAccount,
  doUpdateAccount,
} = accountSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default accountSlice.reducer
